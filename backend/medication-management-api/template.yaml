AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  medication-management-api

  Medication Management API for HomeThrive

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Tracing: Active
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name

Resources:
  # Database resources
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Medication Management API database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Medication Management API database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Medication Management API Lambda functions
      VpcId: !Ref VPC

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: medication_management
      Engine: postgres
      EngineVersion: 14.5
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp2
      MasterUsername: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:password}}'
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true
      DeletionProtection: false
      Tags:
        - Key: Environment
          Value: !Ref Environment

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'medication-management-db-credentials-${Environment}'
      Description: RDS database credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # VPC resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub 'medication-management-vpc-${Environment}'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'medication-management-private-subnet-1-${Environment}'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'medication-management-private-subnet-2-${Environment}'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'medication-management-public-subnet-1-${Environment}'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'medication-management-public-subnet-2-${Environment}'

  # Lambda functions
  MedicationManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          DATABASE_URL: !Sub 'postgresql://${DatabaseSecret.SecretString.username}:${DatabaseSecret.SecretString.password}@${DatabaseInstance.Endpoint.Address}:${DatabaseInstance.Endpoint.Port}/medication_management?schema=public'
          JWT_SECRET: !Sub '{{resolve:secretsmanager:${JwtSecret}:SecretString:secret}}'
          IS_LOCAL: 'false'
          NODE_ENV: !Ref Environment
      Events:
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: get
        GetMedications:
          Type: Api
          Properties:
            Path: /medications
            Method: get
        CreateMedication:
          Type: Api
          Properties:
            Path: /medications
            Method: post
        GetMedication:
          Type: Api
          Properties:
            Path: /medications/{id}
            Method: get
        UpdateMedication:
          Type: Api
          Properties:
            Path: /medications/{id}
            Method: put
        DeleteMedication:
          Type: Api
          Properties:
            Path: /medications/{id}
            Method: delete
      Policies:
        - VPCAccessPolicy: {}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DatabaseSecret
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref JwtSecret
    Metadata:
      BuildMethod: makefile

  JwtSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'medication-management-jwt-secret-${Environment}'
      Description: JWT secret for authentication
      GenerateSecretString:
        SecretStringTemplate: '{"secret": ""}'
        GenerateStringKey: "secret"
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  # Application monitoring
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  MedicationManagementApi:
    Description: API Gateway endpoint URL for Prod stage for Medication Management API
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
  MedicationManagementFunction:
    Description: Medication Management Lambda Function ARN
    Value: !GetAtt MedicationManagementFunction.Arn
  
  MedicationManagementFunctionIamRole:
    Description: Implicit IAM Role created for Medication Management function
    Value: !GetAtt MedicationManagementFunctionRole.Arn
  
  DatabaseEndpoint:
    Description: RDS Database Endpoint
    Value: !GetAtt DatabaseInstance.Endpoint.Address
